@page "/Simulated"
@using MudBlazor.Utilities
@inject IJSRuntime Js

<MudGrid>
    <MudItem xs="3">
        <MudButton OnClick="TogglePlay" Variant="Variant.Filled" Color="@(Playing ? Color.Error : Color.Success)">
            @if (Playing)
            {
                <MudText>Stop</MudText>
            }
            else
            {
                <MudText>Play</MudText>
            }
        </MudButton>
    </MudItem>
    <MudItem xs="3" Style="margin-top:-26px;">
        <MudNumericField Value="@Bpm" Label="BPM" Variant="Variant.Filled" Min="0" ValueChanged="@((int i) => SetBpm(i))"/>
    </MudItem>
    <MudItem xs="6" Style="margin-top:-18px;">
        <MudSelect T="string" Value="@Track" Dense="true" Variant="Variant.Text" Label="Track" ValueChanged="@(s => SetTrack(s))"
                   Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Download" OnAdornmentClick="@Reset">
            <MudSelectItem Value="@("Scanned")"/>
            <MudSelectItem Value="@("Restructured")"/>
        </MudSelect>
    </MudItem>
</MudGrid>

<div id="strudel" style="max-height: 75vh; overflow-y: scroll;"></div>

<MudGrid>
    <MudItem xs="3">
        <MudButton Color="@(Pattern[0] ? Color.Success : @Color.Error)" OnClick="@(async () => await SetPattern(0, !Pattern[0]))" Variant="Variant.Filled">d1</MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton Color="@(Pattern[1] ? Color.Success : @Color.Error)" OnClick="@(async () => await SetPattern(1, !Pattern[1]))" Variant="Variant.Filled">d2</MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton Color="@(Pattern[2] ? Color.Success : @Color.Error)" OnClick="@(async () => await SetPattern(2, !Pattern[2]))" Variant="Variant.Filled">d3</MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton Color="@(Pattern[3] ? Color.Success : @Color.Error)" OnClick="@(async () => await SetPattern(3, !Pattern[3]))" Variant="Variant.Filled">d4</MudButton>
    </MudItem>
</MudGrid>

@code
{
    [CascadingParameter]
    MainLayout MainPage { get; set; }

    public bool Playing { get; set; } = false;
    public int Bpm { get; set; } = 170;
    public string Track { get; set; } = "Restructured";
    public List<bool> Pattern { get; set; } = new() { true, true, true, true };

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        MainPage.Page = MainLayout.Pages.Simulated;
        MainPage.Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("StrudelInit");
        }
    }

    public async Task TogglePlay()
    {
        if (Playing)
        {
            await Stop();
        }
        else
        {
            await Play();
        }
    }

    public async Task SetBpm(int value)
    {
        Bpm = value;
        await Js.InvokeVoidAsync("StrudelSetBpm", value);
    }

    public async Task Play()
    {
        Playing = true;
        await Js.InvokeVoidAsync("StrudelPlay");
    }

    public async Task Stop()
    {
        Playing = false;
        await Js.InvokeVoidAsync("StrudelStop");
    }

    public async Task Reset()
    {
        await SetTrack(Track);
    }

    public async Task SetPattern(int index, bool value)
    {
        Pattern[index] = value;
        await Js.InvokeVoidAsync("StrudelSetPattern", index, value);
    }

    public async Task SetTrack(string track)
    {
        Playing = true;
        Bpm = 170;
        Track = track;
        for (int i = 0; i < Pattern.Count; i++) Pattern[i] = true;
        await Js.InvokeVoidAsync("StrudelSetCode", track.ToLower());
        await Js.InvokeVoidAsync("StrudelPlay");
    }
}